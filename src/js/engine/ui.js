define([
	"jquery",
	"snapsvg",
	"jquery.pub-sub"
], function( $, Snap ) {
	'use strict';

	var UI = {},
	    stage = null,
		viewport = null;

	UI.getStage = function(stage_id) {

		if (stage) return stage;

		stage = new Snap()
			.attr({
				"id": stage_id,
				"class": "pannable"
			});

		stage = stage.node;

		// clean up unwanted desc element generated by SnapSVG
		$(stage).children("desc:first").remove();
		return stage;
	};

	UI.getViewport = function(viewport_id){
		if (viewport) return viewport;

		viewport = Snap(stage).g().attr({
			"id": viewport_id
		});

		// create dummy scene for SVGPanZoom
		var placeholder = viewport.rect(0,0,1026,546).attr({
			"opacity": "0",
			"class": "no-pointer-events"
		});

		// Method to remove the dummy object after first render
		UI.removePlaceholder = function(){
			placeholder.remove();
			placeholder = null;
			delete UI.removePlaceholder;
		};

		viewport = viewport.node;
		return viewport;
	};

	var action_panels = {
		buy: "#action-panel-buy",
		upgrade: "#action-panel-upgrade"
	};

	UI.showUserActionPanel = function(panelId){
		var panel = $(action_panels[panelId]);
		panel.show();
		$("#stage-box-slide").animate(
			{ "bottom": $("#action-panel").height() },
			250,
			"easeOutCubic",
			function() { panel.find("button.main").focus(); }
		);
	};

	UI.hideUserActionPanel = function(){
		$("#stage-box-slide").animate({ "bottom": 0 }, 250, "easeOutCubic", UI.resetUserActionPanel);
	};

	UI.updateUserActionPanel = function(panelId, data){
		var panels = {
			buy: function(){
				$(action_panels[panelId]).find("[data-label='title']").text(data.title);
				$(action_panels[panelId]).find("[data-label='cost']").text(data.cost);
			},
			upgrade: function() {
				$(action_panels[panelId]).find("[data-label='cost']").text(data.cost);
			}
		};

		panels[panelId]();
	};

	UI.feedbackUserActionPanel = function() {
		// Show success animation
		$("#action-panel").find("section").removeClass("done").addClass("done");

		// Hide player action panel
		window.setTimeout(UI.hideUserActionPanel, 1000);

		// Ends turn
		window.setTimeout(FireEvent_PlayerEndsTurn, 1500);
	};

	function FireEvent_PlayerEndsTurn(){
		$.publish("PlayerEndsTurn");
	}

	UI.resetUserActionPanel = function() {
		$("#action-panel").find("section").removeClass("done").hide();
	};

	/**
	 * @namespace DiceButton
	 * @memberOf UI.
	 */
	UI.DiceButton = {
		/** Enable DiceButton */
		enable: function() {
			$("#btn-roll").removeClass("disabled");
		},
		/** Disable DiceButton */
		disable: function() {
			$("#btn-roll").addClass("disabled");
		},
		/** Control events dedicated for DiceButton */
		handler: function( evt, data ) {
			// Handle enable/disable
			if(typeof data.enabled !== "undefined" && data.enabled) {
				UI.DiceButton.enable();
			} else {
				UI.DiceButton.disable();
			}
		}
	};

	// Register handler for DiceButton
	$.subscribe("UI.DiceButton", UI.DiceButton.handler);

	return UI;
});